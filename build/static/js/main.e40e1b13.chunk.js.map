{"version":3,"sources":["services/people.js","components/Person.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","person","delete","Person","deletePerson","key","name","number","value","onClick","Notification","message","className","text","App","useState","persons","setPersons","searchResults","setSearchResults","searchTerm","setSearchTerm","newName","setNewName","newNumber","setNewNumber","setMessage","useEffect","phonebookService","initialPeople","inputRef","useRef","current","focus","select","keyListener","e","document","addEventListener","removeEventListener","handleMessage","console","log","setTimeout","selectPerson","filter","toLowerCase","index","indexOf","window","confirm","status","splice","searchPerson","startsWith","onSubmit","preventDefault","onChange","target","ref","type","map","i","event","personObject","Math","floor","random","length","changedNumber","returned","p","catch","error","String","concat","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e40e1b13.chunk.js","sourcesContent":["import axios from 'axios'\n//const baseUrl = 'https://intense-plains-92002.herokuapp.com/api/persons'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then((response) => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then((response) => response.data)\n}\n\nconst update = (id, data) => {\n  const request = axios.put(`${baseUrl}/${id}`, data)\n  return request.then((response) => {\n    return response.data\n  })\n}\n\nconst deletePerson = (person) => {\n  const request = axios.delete(`${baseUrl}/${person.id}`)\n  return request.then((response) => response.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  deletePerson,\n}\n","import React from 'react'\n\nconst Person = ({ person, deletePerson }) => {\n  return (\n    <>\n      <li key={person.id}>\n        {person.name}: {person.number}\n      </li>\n      <button value={person} onClick={() => deletePerson(person)}>\n        Delete {person.name}\n      </button>\n    </>\n  )\n}\n\nexport default Person\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return <div className=\"notify\">{message.text}</div>\n}\n\nexport default Notification\n","import React, { useState, useEffect, useRef } from 'react'\nimport phonebookService from './services/people'\nimport Person from './components/Person'\nimport Notification from './components/Notification'\nimport './App.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [searchResults, setSearchResults] = useState([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    phonebookService.getAll().then((initialPeople) => {\n      setPersons(initialPeople)\n      setSearchResults(initialPeople)\n    })\n  }, [])\n\n  const reset = (e) => {\n    setSearchTerm('')\n    setSearchResults(persons)\n  }\n\n  const inputRef = useRef()\n\n  useEffect(() => {\n    inputRef.current.focus()\n    inputRef.current.select()\n  }, [])\n\n  useEffect(() => {\n    function keyListener(e) {\n      if (e.key === 'Escape') {\n        setSearchTerm('')\n        setSearchResults(persons)\n      }\n    }\n\n    document.addEventListener('keydown', keyListener)\n\n    return () => document.removeEventListener('keydown', keyListener)\n  })\n\n  const handleMessage = (data) => {\n    setMessage(data)\n    console.log(data)\n    setTimeout(() => {\n      setMessage(null)\n    }, 3000)\n  }\n\n  const selectPerson = persons.filter((person) => {\n    return person.name.toLowerCase() === newName.toLowerCase()\n  })\n\n  const addPerson = (event, name) => {\n    event.preventDefault()\n    const person = selectPerson[0]\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: Math.floor(Math.random() * 100),\n    }\n\n    if (selectPerson.length === 0) {\n      phonebookService\n        .create(personObject)\n        .then((returned) => {\n          setPersons(persons.concat(returned))\n          setSearchResults(persons.concat(returned))\n          handleMessage({ text: `Added ${returned.name}`, status: 'ok' })\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch((error) => {\n          console.log(error.response.data.error)\n          handleMessage({ text: error.response.data.error })\n        })\n\n      return\n    }\n    /* updatePerson */\n    const changedNumber = { ...person, number: newNumber }\n\n    if (selectPerson.length > 0) {\n      const conf = window.confirm(`Change number for ${person.name}?`)\n      if (conf === true) {\n        phonebookService\n          .update(person.id, changedNumber)\n          .then((returned) => {\n            setSearchResults(\n              searchResults.map((p) =>\n                p.name !== person.name ? p : changedNumber\n              )\n            )\n            handleMessage({\n              text: `Changed number for ${returned.name} to ${returned.number} `,\n              status: 'ok',\n            })\n            setNewName('')\n            setNewNumber('')\n          })\n          .catch((error) => {\n            handleMessage({ text: String(error), status: 'error' })\n          })\n      }\n      setNewName('')\n      setNewNumber('')\n      return\n    }\n  }\n\n  const deletePerson = (person) => {\n    let index = searchResults.indexOf(person)\n    const conf = window.confirm(\n      `Are you sure you want to delete ${person.name}?`\n    )\n    if (conf === true) {\n      phonebookService\n        .deletePerson(person)\n        .then(() =>\n          handleMessage({ text: `${person.name} deleted `, status: 'ok' })\n        )\n      searchResults.splice(index, 1)\n      setSearchResults([...searchResults])\n      return\n    }\n    return\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value)\n  }\n\n  const searchPerson = persons.filter((person) => {\n    return person.name.toLowerCase().startsWith(searchTerm.toLowerCase())\n  })\n\n  const handleSearch = (e) => {\n    e.preventDefault()\n    setSearchResults(searchPerson)\n    inputRef.current.select()\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={message} />\n      <form onSubmit={handleSearch}>\n        Search:{' '}\n        <input\n          value={searchTerm}\n          onChange={handleSearchChange}\n          ref={inputRef}\n        />\n        <button type=\"submit\">Search</button>\n        <button onClick={reset}>Reset</button>\n      </form>\n      <ul>\n        {searchResults.map((person, i) => (\n          <Person\n            key={i}\n            person={person}\n            value={person.id}\n            deletePerson={deletePerson}\n          />\n        ))}\n      </ul>\n      <h1>Add Person:</h1>\n      <form onSubmit={addPerson}>\n        Name: <input value={newName} onChange={handleNameChange} />\n        Number: <input value={newNumber} onChange={handleNumberChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more aout service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n//https://fullstackopen.com/en\r\n"],"sourceRoot":""}